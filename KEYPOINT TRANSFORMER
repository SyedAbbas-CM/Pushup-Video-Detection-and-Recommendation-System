import torch
import torch.nn as nn
from torch.nn import TransformerEncoder, TransformerEncoderLayer


class KeyPointsTransformer(nn.Module):
    def __init__(self, num_classes, input_dim=51):
        super(KeyPointsTransformer, self).__init__()

        self.embedding_dim = 256
        self.fc_input = nn.Linear(input_dim, self.embedding_dim)

        self.num_heads = 8
        self.transformer_encoder_layer = TransformerEncoderLayer(d_model=self.embedding_dim, nhead=self.num_heads)
        self.transformer_encoder = TransformerEncoder(self.transformer_encoder_layer, num_layers=12)

        self.fc = nn.Sequential(
            nn.Linear(self.embedding_dim, 512),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(512, 256),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(256, num_classes),
        )

    def forward(self, x):
        batch_size, timesteps, input_dim = x.size()

        x = self.fc_input(x)
        x = x.transpose(0, 1)
        x = self.transformer_encoder(x)
        x = x.transpose(0, 1)

        x = self.fc(x[:, -1, :])
        return x


num_classes = 6  # Exercise and Non-Exercise
model = KeyPointsTransformer(num_classes)
print(model)
